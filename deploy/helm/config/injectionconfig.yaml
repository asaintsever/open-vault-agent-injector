initContainers:
  - name: ovai-vault-agent-init
    image: {{ include "open-vault-agent-injector.injectconfig.vault.image" .Values }}
    imagePullPolicy: {{ .Values.injectconfig.vault.image.pullPolicy }}
    env:
      - name: SKIP_SETCAP
        value: "true"
      - name: VAULT_ADDR
        value: {{ required "Vault server's address must be specified" .Values.vault.addr | quote }}
      - name: VAULT_LOG_FORMAT
        value: {{ .Values.injectconfig.vault.log.format }}
      # env var set by webhook
      - name: OVAI_SECRETS_TEMPLATES_PLACEHOLDER
        value: ""
      # env var set by webhook
      - name: OVAI_VAULT_ROLE
        value: ""
    command:
      - "sh"
      - "-c"
      - |
        cat <<EOF > vault-agent-config.hcl
        pid_file = "/home/vault/pidfile"

        auto_auth {
          method "kubernetes" {
            mount_path = "auth/{{ .Values.vault.authMethods.kubernetes.path }}"
            config = {
              role = "${OVAI_VAULT_ROLE}"
              token_path = "/var/run/secrets/open-vault-agent-injector/serviceaccount/token"
            }
          }

          sink "file" {
            config = {
              path = "/home/vault/.vault-token"
            }
          }
        }

        ${OVAI_SECRETS_TEMPLATES_PLACEHOLDER}
        EOF
        
        docker-entrypoint.sh agent -config=vault-agent-config.hcl -exit-after-auth=true {{ include "open-vault-agent-injector.vault.cert.skip.verify" .Values }} -log-level={{- .Values.injectconfig.vault.log.level }}
        export VAULT_TOKEN=$(cat /home/vault/.vault-token)
        vault token revoke {{ include "open-vault-agent-injector.vault.cert.skip.verify" .Values }} -self
    volumeMounts:
      # Mount path used to share secrets.
      - name: secrets
        mountPath: /opt/ovai/secrets
      # The name's value will be overridden by the webhook to point to container's service account volume to use for Vault authentication.
      - name: OVAI_SA_SECRETS_VOL_NAME
        mountPath: /var/run/secrets/open-vault-agent-injector/serviceaccount
        readOnly: true
    {{- if .Values.injectconfig.vault.resources }}
    resources:
{{ toYaml .Values.injectconfig.vault.resources | indent 6 }}
    {{- end }}
  # This init container is only injected when annotation 'ovai.asaintsever.org/secrets-injection-method' is set to 'env'
  - name: ovai-env-init
    image: {{ include "open-vault-agent-injector.image" .Values }}
    imagePullPolicy: {{ .Values.image.pullPolicy }}
    command:
      - "sh"
      - "-c"
      - |
        cp /opt/ovai/vaultinjector-env /opt/ovai/secrets
    volumeMounts:
      # Mount path used to share secrets and where the vaultinjector-env process is copied so that it can be used from the application's containers
      - name: secrets
        mountPath: /opt/ovai/secrets
    {{- if .Values.injectconfig.vault.resources }}
    resources:
{{ toYaml .Values.injectconfig.vault.resources | indent 6 }}
    {{- end }}
containers:
  # This container is only injected in K8S jobs to monitor app job's container termination and send signal to vault agent sidecar
  - name: ovai-job-babysitter
    image: {{ include "open-vault-agent-injector.injectconfig.jobbabysitter.image" .Values }}
    imagePullPolicy: {{ .Values.injectconfig.jobbabysitter.image.pullPolicy }}
    env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      # env var set by webhook
      - name: OVAI_JOB_CNT_NAME
        value: ""
    command:
      - "sh"
      - "-c"
      - |
        jwt_sa_token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        pod_ns=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
        retCode=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq .code)
        if [ $retCode = "403" ]; then
          curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq .message
          exit 1
        fi

        while true; do
          cntStatus=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq -c --raw-output --arg cntname "${OVAI_JOB_CNT_NAME}" '.status.containerStatuses[] | select(.name == $cntname).state | keys[0]')
          if [ "$cntStatus" = "terminated" ]; then
            echo "=> job container terminated: send signal"
            touch /opt/ovai/shared/vault-sidecars-signal-terminate
            exit 0
          fi
          sleep 5
        done
    volumeMounts:
      # Mount path used by injected sidecars to share data
      - name: ovai-shared
        mountPath: /opt/ovai/shared
      # The name's value will be overridden by the webhook
      - name: K8S_SA_SECRETS_VOL_NAME
        mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        readOnly: true
    {{- if .Values.injectconfig.jobbabysitter.resources }}
    resources:
{{ toYaml .Values.injectconfig.jobbabysitter.resources | indent 6 }}
    {{- end }}
  - name: ovai-vault-agent
    image: {{ include "open-vault-agent-injector.injectconfig.vault.image" .Values }}
    imagePullPolicy: {{ .Values.injectconfig.vault.image.pullPolicy }}
    env:
      - name: SKIP_SETCAP
        value: "true"
      - name: VAULT_ADDR
        value: {{ required "Vault server's address must be specified" .Values.vault.addr | quote }}
      - name: VAULT_LOG_FORMAT
        value: {{ .Values.injectconfig.vault.log.format }}
      # env var set by webhook
      - name: OVAI_JOB_WORKLOAD
        value: "false"
      # env var set by webhook
      - name: OVAI_PROXY_CONFIG_PLACEHOLDER
        value: ""
      # env var set by webhook
      - name: OVAI_SECRETS_TEMPLATES_PLACEHOLDER
        value: ""
      # env var set by webhook
      - name: OVAI_VAULT_AUTH_METHOD
        value: "kubernetes"
      # env var set by webhook
      - name: OVAI_VAULT_ROLE
        value: ""
    command:
      - "sh"
      - "-c"
      - |
        if [ "${OVAI_VAULT_AUTH_METHOD}" = "kubernetes" ]; then
          cat <<EOF > vault-agent-config.hcl
        pid_file = "/home/vault/pidfile"

        auto_auth {
          method "kubernetes" {
            mount_path = "auth/{{ .Values.vault.authMethods.kubernetes.path }}"
            config = {
              role = "${OVAI_VAULT_ROLE}"
              token_path = "/var/run/secrets/open-vault-agent-injector/serviceaccount/token"
            }
          }

          sink "file" {
            config = {
              path = "/home/vault/.vault-token"
            }
          }
        }

        ${OVAI_PROXY_CONFIG_PLACEHOLDER}

        ${OVAI_SECRETS_TEMPLATES_PLACEHOLDER}
        EOF
        elif [ "${OVAI_VAULT_AUTH_METHOD}" = "approle" ]; then
          cat <<EOF > vault-agent-config.hcl
        pid_file = "/home/vault/pidfile"

        auto_auth {
          method "approle" {
            mount_path = "auth/{{ .Values.vault.authMethods.approle.path }}"
            config = {
              role_id_file_path = "/opt/ovai/secrets/{{ .Values.vault.authMethods.approle.roleid_filename }}"
              secret_id_file_path = "/opt/ovai/secrets/{{ .Values.vault.authMethods.approle.secretid_filename }}"
              remove_secret_id_file_after_reading = false
            }
          }

          sink "file" {
            config = {
              path = "/home/vault/.vault-token"
            }
          }
        }

        ${OVAI_PROXY_CONFIG_PLACEHOLDER}

        ${OVAI_SECRETS_TEMPLATES_PLACEHOLDER}
        EOF
        fi
        if [ "${OVAI_JOB_WORKLOAD}" = "true" ]; then
          docker-entrypoint.sh agent -config=vault-agent-config.hcl {{ include "open-vault-agent-injector.vault.cert.skip.verify" .Values }} -log-level={{- .Values.injectconfig.vault.log.level }} &
          while true; do
            if [ -f "/opt/ovai/shared/vault-sidecars-signal-terminate" ]; then
              echo "=> exit (signal received)"
              export VAULT_TOKEN=$(cat /home/vault/.vault-token);
              vault token revoke {{ include "open-vault-agent-injector.vault.cert.skip.verify" .Values }} -self;
              exit 0
            fi
            sleep 5
          done
        else
          docker-entrypoint.sh agent -config=vault-agent-config.hcl {{ include "open-vault-agent-injector.vault.cert.skip.verify" .Values }} -log-level={{- .Values.injectconfig.vault.log.level }}
        fi
    lifecycle:
      preStop:
        exec:
          command:
            - "sh"
            - "-c"
            - >
              export VAULT_TOKEN=$(cat /home/vault/.vault-token);
              vault token revoke {{ include "open-vault-agent-injector.vault.cert.skip.verify" .Values }} -self;
    volumeMounts:
      # Mount path used by injected sidecars to share data
      - name: ovai-shared
        mountPath: /opt/ovai/shared
      # Mount path used to share secrets. The associated volume is expected to be defined in application's manifest but in case it is not,
      # a default 'secrets' volume will be injected in the requesting pod (see definition below) so that mutation process does not fail.
      - name: secrets
        mountPath: /opt/ovai/secrets
      # The name's value will be overridden by the webhook to point to container's service account volume to use for Vault authentication.
      - name: OVAI_SA_SECRETS_VOL_NAME
        mountPath: /var/run/secrets/open-vault-agent-injector/serviceaccount
        readOnly: true
    {{- if .Values.injectconfig.vault.resources }}
    resources:
{{ toYaml .Values.injectconfig.vault.resources | indent 6 }}
    {{- end }}
volumes:
  - name: ovai-shared
    emptyDir:
      medium: Memory
  # Note: if 'secrets' volume is defined in pod's manifest then it will be considered instead of the default definition below
  - name: secrets
    emptyDir:
      medium: Memory